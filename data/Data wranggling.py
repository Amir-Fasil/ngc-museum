## This code is to clean and wranggle the data in a way that is suitable for the Neural Netwotk

# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10_R8xBCWPpr5eUVx14s10kq48Cw-Eo35
"""


from tqdm import tqdm, trange
from tqdm import tqdm, trange
from sentence_transformers import SentenceTransformer
import pandas as pd
import numpy as np

from google.colab import drive

drive.mount("/content/drive")

import pandas as pd
training_data = pd.read_csv("/content/drive/MyDrive/Transformer _input/new_train_data.xls")

from tqdm import tqdm, trange
from tqdm import tqdm, trange
from sentence_transformers import SentenceTransformer
model = SentenceTransformer('all-MiniLM-L6-v2')

articles = training_data["Article"].tolist()

article_vectors = model.encode(articles)

new_training_data = pd.DataFrame(article_vectors)
new_training_data.to_csv("training_data", index = False)

import numpy as np
np.save('my_array.npy', article_vectors)




import numpy as np
import pandas as pd

test_data = pd.read_csv("/content/drive/MyDrive/Final data/numpy_new_test_data.csv")

testX = test_data.to_numpy()

np.save("testX", testX)

train_data = np.load("/content/drive/MyDrive/Final data/my_array.npy")

np.save("trainX", train_data)
train_data

new_test_data = pd.read_csv("/content/drive/MyDrive/Final data/new_test_data.xls")
ini_testY = new_test_data["Class Index"]
ini_testY

new_train_data = pd.read_csv("/content/drive/MyDrive/Final data/new_train_data.xls")
ini_trainY = new_train_data["Class Index"]
ini_trainY

def one_hot_encoding(label):
    """This function return the correct probablity distribution of the image"""
    label = label-1
    zero_array = np.zeros((4,))
    zero_array[label] = 1
    return zero_array.T

testY = pd.DataFrame(columns = ["value"])
for index, element in ini_testY.items():
  new_element = one_hot_encoding(element)
  testY.loc[index, "value"] = new_element
testY = testY.to_numpy()
np.save("testY", testY)

trainY = pd.DataFrame(columns = ["value"])
for index, element in ini_trainY.items():
  new_element = one_hot_encoding(int(element))
  trainY.loc[index, "value"] = new_element
trainY = trainY.to_numpy()
np.save("trainY", trainY)

